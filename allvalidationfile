import React, { useState } from 'react';
import axios from 'axios';

const ParentRegistrationForm = () => {
    const [formData, setFormData] = useState({
        ParentName: '',
        StudentName: '',
        StudentRegisterNumber: '',
        Address: '',
        State: '',
        Country: '',
        City: '',
        ZipCode: '',
        EmailAddress: '',
        PrimaryContactPerson: '',
        PrimaryContactPersonMobile: '',
        SecondaryContactPerson: '',
        SecondaryContactPersonMobile: ''
    });

    const [errors, setErrors] = useState({});
    const [states, setStates] = useState([]);

    const countryStateData = {
        "USA": ["California", "Florida", "New York", "Texas"],
        "Canada": ["Alberta", "British Columbia", "Ontario", "Quebec"],
        "India": ["Delhi", "Maharashtra", "Tamil Nadu", "West Bengal"],
        // Add more countries and states as needed
    };

    const validate = () => {
        let errors = {};

        if (!formData.ParentName.match(/^[A-Za-z ]+$/)) {
            errors.ParentName = 'Parent Name should contain only alphabets and spaces';
        }
        if (!formData.StudentName.match(/^[A-Za-z ]+$/)) {
            errors.StudentName = 'Student Name should contain only alphabets and spaces';
        }
        if (!formData.StudentRegisterNumber.match(/^R-\d{3}$/)) {
            errors.StudentRegisterNumber = 'Student Register Number should be in the format "R-XXX"';
        }
        if (!formData.ZipCode.match(/^\d{6}$/)) {
            errors.ZipCode = 'Zip Code should be 6 digits';
        }
        if (!formData.City.match(/^[A-Za-z]+$/)) {
            errors.City = 'City should contain only alphabets';
        }
        if (!formData.PrimaryContactPersonMobile.match(/^\d{10}$/)) {
            errors.PrimaryContactPersonMobile = 'Primary Contact Person Mobile should be 10 digits';
        }
        if (formData.SecondaryContactPersonMobile && !formData.SecondaryContactPersonMobile.match(/^\d{10}$/)) {
            errors.SecondaryContactPersonMobile = 'Secondary Contact Person Mobile should be 10 digits';
        }
        if (!formData.EmailAddress.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            errors.EmailAddress = 'Invalid Email Address';
        }

        setErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === 'Country') {
            setStates(countryStateData[value] || []);
        }

        setFormData(prevState => ({
            ...prevState,
            [name]: value
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (validate()) {
            try {
                const response = await axios.post('https://localhost:7183/api/Parents', formData, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                console.log(response.data);
                alert('Registration successful');
            } catch (error) {
                console.error('Registration Failed', error.response?.data || error.message);
                alert('There was an error registering the parent!');
            }
        } else {
            alert('Please fix the errors in the form.');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" name="ParentName" value={formData.ParentName} onChange={handleChange} placeholder="Parent Name" required />
            {errors.ParentName && <div style={{ color: 'red' }}>{errors.ParentName}</div>}

            <input type="text" name="StudentName" value={formData.StudentName} onChange={handleChange} placeholder="Student Name" required />
            {errors.StudentName && <div style={{ color: 'red' }}>{errors.StudentName}</div>}

            <input type="text" name="StudentRegisterNumber" value={formData.StudentRegisterNumber} onChange={handleChange} placeholder="Student Register Number" required />
            {errors.StudentRegisterNumber && <div style={{ color: 'red' }}>{errors.StudentRegisterNumber}</div>}

            <input type="text" name="Address" value={formData.Address} onChange={handleChange} placeholder="Address" required />
            
            <select name="Country" value={formData.Country} onChange={handleChange} required>
                <option value="">Select Country</option>
                {Object.keys(countryStateData).map((country) => (
                    <option key={country} value={country}>{country}</option>
                ))}
            </select>
            {errors.Country && <div style={{ color: 'red' }}>{errors.Country}</div>}

            <select name="State" value={formData.State} onChange={handleChange} required>
                <option value="">Select State</option>
                {states.map((state) => (
                    <option key={state} value={state}>{state}</option>
                ))}
            </select>
            {errors.State && <div style={{ color: 'red' }}>{errors.State}</div>}

            <input type="text" name="City" value={formData.City} onChange={handleChange} placeholder="City" required />
            {errors.City && <div style={{ color: 'red' }}>{errors.City}</div>}

            <input type="text" name="ZipCode" value={formData.ZipCode} onChange={handleChange} placeholder="Zip Code" required />
            {errors.ZipCode && <div style={{ color: 'red' }}>{errors.ZipCode}</div>}

            <input type="email" name="EmailAddress" value={formData.EmailAddress} onChange={handleChange} placeholder="Email Address" required />
            {errors.EmailAddress && <div style={{ color: 'red' }}>{errors.EmailAddress}</div>}

            <input type="text" name="PrimaryContactPerson" value={formData.PrimaryContactPerson} onChange={handleChange} placeholder="Primary Contact Person" required />

            <input type="text" name="PrimaryContactPersonMobile" value={formData.PrimaryContactPersonMobile} onChange={handleChange} placeholder="Primary Contact Person Mobile" required />
            {errors.PrimaryContactPersonMobile && <div style={{ color: 'red' }}>{errors.PrimaryContactPersonMobile}</div>}

            <input type="text" name="SecondaryContactPerson" value={formData.SecondaryContactPerson} onChange={handleChange} placeholder="Secondary Contact Person" required />

            <input type="text" name="SecondaryContactPersonMobile" value={formData.SecondaryContactPersonMobile} onChange={handleChange} placeholder="Secondary Contact Person Mobile" required />
            {errors.SecondaryContactPersonMobile && <div style={{ color: 'red' }}>{errors.SecondaryContactPersonMobile}</div>}

            <button type="submit">Register</button>
        </form>
    );
};

export default ParentRegistrationForm;
